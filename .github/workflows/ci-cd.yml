name: CI/CD Pipeline ‚Äì Omnixys Person Service

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
    tags:
      - 'v*'  # Nur f√ºr Versionstags (z.B. v1.0.0)

env:
  IMAGE_NAME: omnixys-person-service
  MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}
  TEST_SERVER_PORT: ${{ secrets.TEST_SERVER_PORT }}

  DOCKER_USER: calebscript
  REGISTRY: docker.io

  ACTIVE_PROFILE: ${{ secrets.ACTIVE_PROFILE }}
  HTTPS: ${{ secrets.HTTPS }}

  MONGODB_URI: ${{ secrets.MONGODB_URI }}

  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  KC_SERVICE_SECRET: ${{ secrets.KC_SERVICE_SECRET }}
  KC_SERVICE_CLIENT_ID: ${{ secrets.KC_SERVICE_CLIENT_ID }}
  KC_SERVICE_REALM: ${{ secrets.KC_SERVICE_REALM }}
  KC_SERVICE_HOST: ${{ secrets.KC_SERVICE_HOST }}
  KC_SERVICE_PORT: ${{ secrets.KC_SERVICE_PORT }}

  KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
  TEMPO_HOST: ${{ secrets.TEMPO_HOST }}

jobs:
  build:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [23]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print ref name
        run: echo "This workflow was triggered by ${{ github.ref_name }}"

      - name: Print actor
        run: echo "The actor is ${{ github.actor }}"

      - name: Print tag
        run: echo "The tag is ${{ github.ref_name }}"

      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}

      - name: Grant execute permissions for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload Build Artifact (JAR)
        uses: actions/upload-artifact@v4
        with:
          name: omnixys-person-service-jar
          path: build/libs/*.jar


  analyze:
    
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Run Code Quality (JaCoCo)
      run: ./gradlew jacocoTestReport

     
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        publish_dir: ./docs/backend
        destination_dir: backend

  package:
    name: üì¶ Package Application
    runs-on: ubuntu-latest
    needs: [build, analyze]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: omnixys-person-service-jar
          path: build/libs

      - name: Archive JAR
        run: zip -j person-service.zip build/libs/*.jar

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: person-service-package
          path: person-service.zip

  docker:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
          IMAGE_TAG=latest
          docker build -t $REGISTRY/$DOCKER_USER/$IMAGE_NAME:$IMAGE_TAG .
          docker push $REGISTRY/$DOCKER_USER/$IMAGE_NAME:$IMAGE_TAG
