# Gemeinsame Konfiguration
server:
  http2:
    enabled: ${app.http2.enabled}
  ssl:
    enabled: ${app.ssl.enabled}
    bundle: microservice
  port: ${app.server.port}
  compression:
    enabled: true
    mime-types: application/hal+json
    min-response-size: 2KB
  error:
    whitelabel:
      enabled: false
  shutdown: graceful

# Spring Boot Einstellungen
spring:

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # value-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            addTypeInfo: false
          type:
            mapping:
              createAccount: com.gentlecorp.person.models.event.CreateAccountDTO
              deleteAccount: com.gentlecorp.person.models.event.DeleteAccountDTO

  graphql:
    graphiql:
      enabled: true
    schema:
      printer:
        enabled: true

  profiles:
    active: ${app.env}

  application:
    name: person-service
    version: 25.05.01

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://${app.keycloak.host}:${app.keycloak.port}/auth/realms/${app.keycloak.realm}

  data:
    mongodb:
      uri: ${app.mongo.uri}
      database: ${app.mongo.database}
      uuid-representation: standard


management:
  metrics:
    enable:
      all: true
  endpoints:
    prometheus:
      enabled: true
    web:
      exposure:
        include:
          - prometheus
          - health
          - info
          - metrics
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      # endpoint: http://tempo:4318
      endpoint: http://localhost:4318/v1/traces
      # endpoint: http://localhost:4317


# Applikationsspezifische Einstellungen
app:
  version: ${spring.application.version}
  name: ${spring.application.name}
  groupId: gentlecorp-${spring.application.name}
  env: ${ACTIVE_PROFILE:test}
  password: p
  keycloak:
    client-secret: ${KC_SERVICE_SECRET}
    host: ${KC_SERVICE_HOST}
    port: ${KC_SERVICE_PORT}
    realm: ${KC_SERVICE_REALM}
    client-id: ${KC_SERVICE_CLIENT_ID}

  mongo:
    uri: ${MONGODB_URI}


# Logging-Konfiguration
logging:
  file.name: ./tmp/application.log
  logback:
    rollingpolicy:
      file-name-pattern: ${logging.file.name}.%d{yyyy-MM-dd}.%i.gz
      max-file-size: 100KB
      max-history: 3
  pattern:
    console: >
      %clr(%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}){faint} %clr(%5level) %clr(${PID:- }){magenta}
      %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{39}){cyan}
      %clr(:){faint} %msg%n%wEx
    file: >
      %date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %5level ${PID:- } --- [%thread]
      %-40.40logger{39} : %m%n%wEx
  level:
    com.gentlecorp.person: trace
    org.apache.catalina.loader.WebappClassLoaderBase: info
    org.springframework.boot.availability.ApplicationAvailabilityBean: debug
    org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener: warn
    org.springframework.security.core.userdetails.User: error
    org.springframework.security.web.server.authorization.AuthorizationWebFilter: trace
    org.springframework.web.reactive.function.client.ExchangeFunctions: trace
    org.springframework.web.service.invoker.PathVariableArgumentResolver: trace
    org.springframework.web.service.invoker.RequestHeaderArgumentResolver: trace
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor: debug
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: debug
    org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: error
    io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor: error
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace
    org.hibernate.SQL_SLOW: warn
    org.flywaydb.core.internal.sqlscript.DefaultSqlScriptExecutor: debug
    io.qameta.allure.AllureLifecycle: fatal
    org.junit.jupiter.engine.descriptor.TestInstanceLifecycleUtils: warn
    org.springframework.boot.test.context.SpringBootTestContextBootstrapper: warn
    org.springframework.test.context.support.AbstractContextLoader: warn
    org.springframework.test.context.support.AnnotationConfigContextLoaderUtils: warn
    org.springframework.test.context.support.DefaultTestContextBootstrapper: warn
    org.springframework.data.mongodb: debug
    org.junit.jupiter: warn

    io.micrometer: DEBUG
    io.opentelemetry: DEBUG
    org.springframework.boot.actuate.autoconfigure.tracing: DEBUG

    # org.springframework.graphql: debug
